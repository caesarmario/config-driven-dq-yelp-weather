####
## Airflow DAG: To process yelp json data
## Tech Implementation Answer by Mario Caesar // caesarmario87@gmail.com
####

# -- Imports
from airflow import DAG
from airflow.sdk import Variable
from airflow.operators.empty import EmptyOperator
from airflow.operators.bash import BashOperator
from airflow.utils.task_group import TaskGroup
from airflow.operators.trigger_dagrun import TriggerDagRunOperator

from datetime import datetime, timedelta

from utils.email_utils import send_email_alert

# -- DAG-level settings
job_name        = "process_yelp_json_to_minio"

default_args = {
    "owner"             : "caesarmario87@gmail.com",
    "depends_on_past"   : False,
    "start_date"        : datetime(2025, 5, 1),
    "retries"           : 1,
    "max_active_runs"   : 1,
    "retry_delay"       : timedelta(minutes=2),
}

dag = DAG(
    dag_id            = f"02_dag_{job_name}",
    default_args      = default_args,
    catchup           = False,
    max_active_runs   = 1,
    tags              = ["test_case", "tech_implementation"]
)

# -- Function: run data processor script
def run_processor(file_name: str, **kwargs):
    """
    Run Spark script to process Yelp JSON into Parquet via MinIO.
    """
    minio_creds = Variable.get("minio_creds")

    return BashOperator(
        task_id=f"spark_process_{file_name}",
        bash_command=(
            f"docker exec spark-master bash -c '"
            f"export HOME=/tmp && "
            f"/opt/bitnami/spark/bin/spark-submit "
            f"--master spark://spark-master:7077 "
            f"/opt/project/scripts/process_yelp_json_to_minio.py "
            f"--file_name {file_name} "
            f"--creds \"{minio_creds}\"'"
        )
    )


# -- Tasks
# Dummy Start
task_start = EmptyOperator(
    task_id="task_start",
    dag=dag
)

# Extract & transform JSON to Parquet files
with TaskGroup("process_yelp_json", dag=dag) as process_group:
    processing_tasks_tip      = run_processor("tip")

# Dummy End
task_end = EmptyOperator(
    task_id="task_end",
    dag=dag
)

# -- Define execution order
task_start >> process_group >> task_end